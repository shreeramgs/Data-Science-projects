q()
library(randomForest)
require(randomForest)
import(randomForest)
require(randomForest)
library(randomForest)
library(neuralnet)
library(ggplot2)
library(rpart)
library(GGally)
library(caret)
library(nnet)
require(nnet)
require(randomForest)
require(neuralnet)
require(ggplot2)
require(rpart)
require(GGally)
install.packages(randomForest)
install(randomForest)
install.packages("randomForest")
install.packages("neuralnet")
install.packages("ggplot2")
install.packages("rpart")
install.packages("GGally")
y <- get(load("cleveland.RData"))
y <- get(load("cleveland.RData"))
y <- get(load("C:/Users/Sriram/Desktop/R projects"))
dim(y)
y <- get(load("cleveland.RData"))
str(y)
y <- get(load("cleveland.RData"))
install.packages("gRbase")
library(gRbase)
data(cad1)
data(cad1)
library(gRbase)
data(cad1)
help(gRbase)
‘??gRbase’
??gRbase
data(cad1)
x = data.frame(col1=c(43,55,76), col2=c(5,19,25)) x["col3"]
x = data.frame(col1=c(43,55,76), col2=c(5,19,25)) x["col3"]
x = data.frame(col1=c(43,55,76), col2=c(5,19,25)) x["col3"])
x = data.frame(col1=c(43,55,76), col2=c(5,19,25))
x["col3"] = x["col1"] * x["col2"]
x = sum(x["col3"])
x
x
#Q1)
require(ISLR)
require(caret)
require(tidyverse)
library(ggplot2)
data(College)
head(College)
set.seed(1)
var <- createDataPartition(College$Accept , p = 0.5, list = FALSE)
#Q1.a)
#pairwise plots
pairs(College[var,-var],col="brown")
#histograms: Accepted vs number of college
var1 <- ggplot(College, aes(y=Accept, col="brown" ))+
geom_bar()+
ggtitle(" Divide of Accepted Institutions")+
labs(x="Number of Colleges",
y="Accepted ")
var1
#histograms of colleges phd candidates
var1 <- ggplot(College, aes(x=PhD))+
geom_bar()+
ggtitle("Count of Institutions per phd candidates")+
labs(x="PhD",
y=" Count of Colleges")
var1
#1.b)
#Scaling PhD candidates of the colleges and plotting histogram
var1<-scale(College$PhD, center = TRUE, scale = TRUE)
var2 <- ggplot(College, aes(x=var1))+
geom_bar()+
ggtitle("Count of Institutions per phd candidates")+
labs(x="Accepted",
y=" Number of Colleges")
var2
#1.c)
head(College$Private)
#Creating Private Data frame
private<-College[College$Private == 'Yes',]
head(private)
save(private, file = "private.Rdata")
#Creating Public Data frame
public<-College[College$Private == 'No',]
head(public)
save(public, file = 'public.Rdata')
#1.d) ordering private in descending order
order(private$Apps, decreasing = TRUE, method = c("auto"))
#ordering in public in decreasing order
order(public$Apps, decreasing = TRUE, method = c("shell"))
#1.e)Eliminate all colleges of median less than Top25%
private_elimnated<-College[median(private$Top25perc),]
summary(private)
public_elimnated<-College[median(public$Top25perc),]
summary(public)
#1.f)graduation rate into high or low
#grad_rate_class of private
grad_rate_class <- ordered(cut(private$Grad.Rate, c(15,40, 70, 100)), labels = c("High", "Medium", "Low") )
summary(grad_rate_class)
#append to private
private$grad_rate_class <-grad_rate_class
head(private)
var1 <- ggplot(private, aes(x=grad_rate_class))+
geom_bar()+
ggtitle("Count of Institutions per grad_rate_class candidates")+
labs(x="grad_rate_class",
y=" Count of Colleges")
var1
#grad_rate_class of public
grad_rate_class <- ordered(cut(public$Grad.Rate, c(15,40, 70, 100)), labels = c("High", "Medium", "Low") )
summary(grad_rate_class)
#append to public
public$grad_rate_class <-grad_rate_class
head(public)
var1 <- ggplot(public, aes(x=grad_rate_class))+
geom_bar()+
ggtitle("Institutions per grad_rate_class candidates")+
labs(x="grad_rate_class",
y=" Count of Colleges")
var1
#1.g)Create a list to add both data set
#create a list
new_list<-list()
#append private data set to list
new_list[[length(new_list)+1]] <- private
#append public data set to list
new_list[[length(new_list)+1]] <- public
new_list
#save it to a .Rdata file
save(new_list, file = "private.Rdata")
#Q2)
library(randomForest)
library("rpart") #install.packages("rpart")
#loading the marketing dataset
load("marketing.RData")
#Q1)
require(ISLR)
require(caret)
require(tidyverse)
library(ggplot2)
data(College)
head(College)
set.seed(1)
var <- createDataPartition(College$Accept , p = 0.5, list = FALSE)
#Q1.a)
#pairwise plots
pairs(College[var,-var],col="brown")
#histograms: Accepted vs number of college
var1 <- ggplot(College, aes(y=Accept, col="brown" ))+
geom_bar()+
ggtitle(" Divide of Accepted Institutions")+
labs(x="Number of Colleges",
y="Accepted ")
var1
#histograms of colleges phd candidates
var1 <- ggplot(College, aes(x=PhD))+
geom_bar()+
ggtitle("Count of Institutions per phd candidates")+
labs(x="PhD",
y=" Count of Colleges")
var1
#1.b)
#Scaling PhD candidates of the colleges and plotting histogram
var1<-scale(College$PhD, center = TRUE, scale = TRUE)
var2 <- ggplot(College, aes(x=var1))+
geom_bar()+
ggtitle("Count of Institutions per phd candidates")+
labs(x="Accepted",
y=" Number of Colleges")
var2
#1.c)
head(College$Private)
#Creating Private Data frame
private<-College[College$Private == 'Yes',]
head(private)
save(private, file = "private.Rdata")
#Creating Public Data frame
public<-College[College$Private == 'No',]
head(public)
save(public, file = 'public.Rdata')
#1.d) ordering private in descending order
order(private$Apps, decreasing = TRUE, method = c("auto"))
#ordering in public in decreasing order
order(public$Apps, decreasing = TRUE, method = c("shell"))
#1.e)Eliminate all colleges of median less than Top25%
private_elimnated<-College[median(private$Top25perc),]
summary(private)
public_elimnated<-College[median(public$Top25perc),]
summary(public)
#1.f)graduation rate into high or low
#grad_rate_class of private
grad_rate_class <- ordered(cut(private$Grad.Rate, c(15,40, 70, 100)), labels = c("High", "Medium", "Low") )
summary(grad_rate_class)
#append to private
private$grad_rate_class <-grad_rate_class
head(private)
var1 <- ggplot(private, aes(x=grad_rate_class))+
geom_bar()+
ggtitle("Count of Institutions per grad_rate_class candidates")+
labs(x="grad_rate_class",
y=" Count of Colleges")
var1
#grad_rate_class of public
grad_rate_class <- ordered(cut(public$Grad.Rate, c(15,40, 70, 100)), labels = c("High", "Medium", "Low") )
summary(grad_rate_class)
#append to public
public$grad_rate_class <-grad_rate_class
head(public)
var1 <- ggplot(public, aes(x=grad_rate_class))+
geom_bar()+
ggtitle("Institutions per grad_rate_class candidates")+
labs(x="grad_rate_class",
y=" Count of Colleges")
var1
#1.g)Create a list to add both data set
#create a list
new_list<-list()
#append private data set to list
new_list[[length(new_list)+1]] <- private
#append public data set to list
new_list[[length(new_list)+1]] <- public
new_list
#save it to a .Rdata file
save(new_list, file = "private.Rdata")
summarise(College)
describe(College)
summary(College)
#pairwise plots ro view correlations
pairs(College[var,-var],col="brown")
#histograms: Accepted vs number of college
var1 <- ggplot(College, aes(y=Accept, col="brown" ))+
geom_bar()+
ggtitle(" Divide of Accepted Institutions")+
labs(x="Number of Colleges",
y="Accepted ")
var1
#Eliminate all colleges of median less than Top25%
private_elimnated<-College[median(private$Top25perc),]
summary(private)
public_elimnated<-College[median(public$Top25perc),]
summary(public)
#Eliminate all colleges of median less than Top25%
private_elimnated<-College[median(private$Top25perc),]
summary(private)
public_elimnated<-College[median(public$Top25perc),]
summary(public)
summary(public)
summary(grad_rate_class)
grad_rate_class
summary(grad_rate_class)
#Subsetting the data
head(College$Private)
#Creating Private Data frame
private<-College[College$Private == 'Yes',]
head(private)
save(private, file = "private.Rdata")
#Creating Public Data frame
public<-College[College$Private == 'No',]
head(public)
save(public, file = 'public.Rdata')
#Ordering private in descending order
order(private$Apps, decreasing = TRUE, method = c("auto"))
#ordering in public in decreasing order
order(public$Apps, decreasing = TRUE, method = c("shell"))
private$Grad.Rate
private$grad_rate_class <-grad_rate_class
#1Convrting to categorical variable graduation rate from values high - low
#grad_rate_class of private
grad_rate_class <- ordered(cut(private$Grad.Rate, c(15,40, 70, 100)), labels = c("High", "Medium", "Low") )
summary(grad_rate_class)
#append to private
private$grad_rate_class <-grad_rate_class
head(private)
var1 <- ggplot(private, aes(x=grad_rate_class))+
geom_bar()+
ggtitle("Count of Institutions per grad_rate_class candidates")+
labs(x="grad_rate_class",
y=" Count of Colleges")
var1
#grad_rate_class of public
grad_rate_class <- ordered(cut(public$Grad.Rate, c(15,40, 70, 100)), labels = c("High", "Medium", "Low") )
summary(grad_rate_class)
#append to public
public$grad_rate_class <-grad_rate_class
head(public)
var1 <- ggplot(public, aes(x=grad_rate_class))+
geom_bar()+
ggtitle("Institutions per grad_rate_class candidates")+
labs(x="grad_rate_class",
y=" Count of Colleges")
#Load dependencies
require(ISLR)
require(caret)
require(tidyverse)
library(ggplot2)
#View the data college dataset data frame
data(College)
head(College)
summary(College)
set.seed(1)
#Creating partitioning
var <- createDataPartition(College$Accept , p = 0.5, list = FALSE)
#pairwise plots ro view correlations
pairs(College[var,-var],col="brown")
#histograms: Accepted vs number of college
var1 <- ggplot(College, aes(y=Accept, col="brown" ))+
geom_bar()+
ggtitle(" Divide of Accepted Institutions")+
labs(x="Number of Colleges",
y="Accepted ")
var1
#histograms of colleges phd candidates
var1 <- ggplot(College, aes(x=PhD))+
geom_bar()+
ggtitle("Count of Institutions per phd candidates")+
labs(x="PhD",
y=" Count of Colleges")
var1
#Scaling PhD candidates of the colleges and plotting histogram
var1<-scale(College$PhD, center = TRUE, scale = TRUE)
var2 <- ggplot(College, aes(x=var1))+
geom_bar()+
ggtitle("Count of Institutions per phd candidates")+
labs(x="Accepted",
y=" Number of Colleges")
var2
#Subsetting the data
head(College$Private)
#Creating Private Data frame
private<-College[College$Private == 'Yes',]
head(private)
save(private, file = "private.Rdata")
#Creating Public Data frame
public<-College[College$Private == 'No',]
head(public)
save(public, file = 'public.Rdata')
#Ordering private in descending order
order(private$Apps, decreasing = TRUE, method = c("auto"))
#ordering in public in decreasing order
order(public$Apps, decreasing = TRUE, method = c("shell"))
#Eliminate all colleges of median less than Top25%
private_elimnated<-College[median(private$Top25perc),]
summary(private)
public_elimnated<-College[median(public$Top25perc),]
summary(public)
#1Convrting to categorical variable graduation rate from values high - low
#grad_rate_class of private
grad_rate_class <- ordered(cut(private$Grad.Rate, c(15,40, 70, 100)), labels = c("High", "Medium", "Low") )
summary(grad_rate_class)
#append to private
private$grad_rate_class <-grad_rate_class
head(private)
var1 <- ggplot(private, aes(x=grad_rate_class))+
geom_bar()+
ggtitle("Count of Institutions per grad_rate_class candidates")+
labs(x="grad_rate_class",
y=" Count of Colleges")
var1
#grad_rate_class of public
grad_rate_class <- ordered(cut(public$Grad.Rate, c(15,40, 70, 100)), labels = c("High", "Medium", "Low") )
summary(grad_rate_class)
#append to public
public$grad_rate_class <-grad_rate_class
head(public)
var1 <- ggplot(public, aes(x=grad_rate_class))+
geom_bar()+
ggtitle("Institutions per grad_rate_class candidates")+
labs(x="grad_rate_class",
y=" Count of Colleges")
var1
#Creating a list to append both data set
new_list<-list()
#append private data set to list
new_list[[length(new_list)+1]] <- private
#append public data set to list
new_list[[length(new_list)+1]] <- public
new_list
#save it to a .Rdata file
save(new_list, file = "private.Rdata")
source("~/.active-rstudio-document")
plot(cars)
```{r}
plot(cars)
plot(cars)
plot(cars)
plot(cars)
library(randomForest)
library("rpart") #install.packages("rpart")
#loading the marketing dataset
load("marketing.RData")
library(randomForest)
library("rpart") #install.packages("rpart")
#loading the marketing dataset
library(randomForest)
library("rpart") #install.packages("rpart")
#loading the marketing dataset
load("marketing.RData")
library(randomForest)
library("rpart") #install.packages("rpart")
#loading the marketing dataset
install.packages("randomForest")
install.packages("randomForest")
#loading the marketing dataset
load("marketing.RData")
library(randomForest)
library("rpart") #install.packages("rpart")
#loading the marketing dataset
load("marketing.RData")
#loading the marketing dataset
load(marketing.RData)
getwd()
setwd("C:/Users/Sriram/Documents/GitHub/Data-Science-projects/Data Science Projects/unsupervised learning methods/Home Work 1")
#loading the marketing dataset
load(marketing.RData)
ls()
load("C:/Users/Sriram/Documents/GitHub/Data-Science-projects/Data Science Projects/unsupervised learning methods/Home Work 1")
#loading the marketing dataset
load(marketing.R)
#loading the marketing dataset
load(marketing)
#loading the marketing dataset
ls()
load("~/GitHub/Data-Science-projects/Data Science Projects/unsupervised learning methods/Home Work 1/marketing.RData")
Data
ls()
#loading the marketing dataset
load(marketing)
#loading the marketing dataset
load(private)
#loading the marketing dataset
load(private.RData)
marketing
dim(marketing) # 8993 x 14
summary(marketing)
marketing <- na.omit(marketing)
dim(marketing) # 6876 x 14
marketing <- na.omit(marketing)
summary(marketing)
marketing <- na.omit(marketing)
View(marketing)
dim(marketing) # 8993 x 14
randomized_data <- marketing
for (i in 1:14) {
min_val = min(marketing[,i])
max_val = max(marketing[,i])
randomized_data[,i] = floor(runif(nrow(marketing), min=min_val, max=max_val + 1))
permuted_data[,i] = sample(min_val: max_val, nrow(marketing), replace = TRUE)
}
permuted_data
# i) sample uniformly for each variable
model <- rpart.control(minsplit = 350, xval = 40, cp = 0)
classif <- rpart(result~., data = new_data_1, method = "class", control = model)
# i) sample uniformly for each variable
model <- rpart.control(minsplit = 350, xval = 40, cp = 0)
classif <- rpart(result~., data = new_data_1, method = "class", control = model)
marketing
marketing$result <- 1
new_data_1
permuted_data
